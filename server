#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
# install.packages("anyLib")
# anyLib::anyLib(c("shiny", "shinydashboard", "shinyWidgets", "DT", "plotly", "ggplot2", "googleVis", "colourpicker"))
library(shinydashboard)
library(shinyWidgets)

# Define server logic required to draw a histogram
server <- function(input, output, session) { 
  
  data <- reactiveValues()
  
  
  #PrÃÂ©visualisation
  output$preview <-  renderDataTable({
    
    req(input$dataFile)
   
    #A FAIRE : LUI DIRE DE MONTRER UNIQUEMENT LES COLONNES QUI NOUS INTERESSENT
    #(La c'est encore un peu brouillon^^)
    df <- read.csv(input$dataFile$datapath,
                   header = TRUE,
                   sep = ";",
                   dec=",",
                   nrows=10
    )
  },  options = list(scrollX = TRUE , dom = 't'))
  
  
  
  #Lecture des donnees
  
  observeEvent(input$actBtnVisualisation, {
    
    if(!is.null(input$dataFile$datapath)){
      data$table = read.csv(input$dataFile$datapath,
                            header = TRUE,
                            sep = ";",
                            dec=",")
      
      sendSweetAlert(
        session = session,
        title = "Done !",
        text = "Le fichier a bien Ã©tÃ© lu !",
        type = "success"
      )
      
      updateTabItems(session, "tabs", selected = "visualization")
    }
    
  })
  
  #Visualisaiton des donnÃ©es 

  
  output$dataTable = DT::renderDataTable(data$table)
  
  #TraÃ§age de la carte (ici un graph pour test avec nos datas)
  
  output$plotAvecR <- renderPlot({
    data$table$lat<-data$table$LAT
    data$table$lon<-data$table$LON
    data$table$metal.ring.info[data$table$ACTION=="B"]<-1
    data$table$metal.ring.info[data$table$ACTION=="C"]<-4
    data$table$metal.ring.info[data$table$ACTION=="R"]<-4
    data$table$ring<-data$table$BAGUE
    data$table$scheme<-data$table$CENTRE
    bird_recapt<-as.data.frame(table(data$table$BAGUE))
    bird_recapt2<-bird_recapt[which(bird_recapt$Freq>1),]
    data$table<-data$table[which(data$table$BAGUE %in% bird_recapt2$Var1),]
    draw.recmap(data$table, points=1, lines=1, pcol="black", lcol="red",
                mercator=TRUE, bbox=c(-20, 40, 0, 70),
                projection= "mercator", border= "gray")

  })

  }
