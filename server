#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
# install.packages("anyLib")
# anyLib::anyLib(c("shiny", "shinydashboard", "shinyWidgets", "DT", "plotly", "ggplot2", "googleVis", "colourpicker"))
library(shinydashboard)
library(shinyWidgets)

# Define server logic required to draw a histogram
server <- function(input, output, session) { 
  
  data <- reactiveValues()
  
  
  #Previsualisation
  output$preview <-  renderDataTable({
    
    req(input$dataFile)
  #Rmq on pouvait importer du xls ce serait encore mieux 
    df <- read.csv(input$dataFile$datapath,
                   header = TRUE,
                   sep = ";",
                   dec=",",
                   nrows=10,
                   colClasses = c(PREC.DATE = "NULL",HEURE = "NULL", DEPT = "NULL",
                                  PAYS = "NULL", Dept.en.clair = "NULL", 
                                  LP = "NULL", MA = "NULL", AD = "NULL",THEME.SESSION = "NULL",
                                  THEME = "NULL", BAGUEUR = "NULL", BG = "NULL",
                                  COND.REPR = "NULL", CIRC.REPR = "NULL", MEMO.SESSION = "NULL",
                                  MEMO = "NULL", FS = "NULL", HS = "NULL",
                                  DS = "NULL", GE = "NULL", RE = "NULL",
                                  MI = "NULL", Leurre = "NULL", LP.Droite = "NULL",
                                  NF = "NULL", BC = "NULL", CS = "NULL",
                                  CA = "NULL", PC = "NULL", PI = "NULL",
                                  TL = "NULL", TQ = "NULL", REFERENCE = "NULL",
                                  DECRIT_COMME = "NULL", Nom.scientifique = "NULL", Nom.vernaculaire = "NULL")
    )[1:11]
  },  options = list(scrollX = TRUE ,scrollY = TRUE , dom = 't'))
  
  
  
  #Lecture des donnees
  
  observeEvent(input$actBtnVisualisation, {
    
    if(!is.null(input$dataFile$datapath)){
      data$table = read.csv(input$dataFile$datapath,
                            header = TRUE,
                            sep = ";",
                            dec=",")
      
      sendSweetAlert(
        session = session,
        title = "Done !",
        text = "Le fichier a bien ete lu !",
        type = "success"
      )
      
      updateTabItems(session, "tabs", selected = "visualization")
    }
    
  })
  
  #Visualisation des donnees 
  #BUG  LE TITRE DES COLONNES NE SUIT PAS QUAND ON SCROLE DE GAUCHE A DROITE
  #peut etre simplifier l affichage comme dans la previsualisation
  #BUG  Le bidule Search n a pas l air de marcher
  
  output$dataTable = DT::renderDataTable(data$table,  options = list(scrollY = TRUE))
  

  #Modification des donnees
  
  
  
  #Selection des donnees
  
  #choix des sites de capture
  output$siteTypeUi <- renderUI({
    data$table$lat<-as.numeric(data$table$LAT)
    data$table$lon<-as.numeric(data$table$LON)
    data$table$metal.ring.info[data$table$ACTION=="B"]<-1
    data$table$metal.ring.info[data$table$ACTION=="C"]<-4
    data$table$metal.ring.info[data$table$ACTION=="R"]<-4
    data$table$ring<-data$table$BAGUE
    data$table$scheme<-data$table$CENTRE
    bird_recapt<-as.data.frame(table(data$table$BAGUE))
    bird_recapt2<-bird_recapt[which(bird_recapt$Freq>1),]
    data$table<-data$table[which(data$table$BAGUE %in% bird_recapt2$Var1),]
    
    
    selectizeInput("siteType", "",
                   names(sort(table(data$table$LIEUDIT), decreasing=TRUE)),
                   selected = NULL, multiple = TRUE,
                   options = list(placeholder = "Choisir vos sites de capture"))
    
    
  })
  
  #choix des annees
  output$anTypeUi <- renderUI({
    data$table$lat<-as.numeric(data$table$LAT)
    data$table$lon<-as.numeric(data$table$LON)
    data$table$metal.ring.info[data$table$ACTION=="B"]<-1
    data$table$metal.ring.info[data$table$ACTION=="C"]<-4
    data$table$metal.ring.info[data$table$ACTION=="R"]<-4
    data$table$ring<-data$table$BAGUE
    data$table$scheme<-data$table$CENTRE
    bird_recapt<-as.data.frame(table(data$table$BAGUE))
    bird_recapt2<-bird_recapt[which(bird_recapt$Freq>1),]
    data$table<-data$table[which(data$table$BAGUE %in% bird_recapt2$Var1),]

    if(input$subsetType2 == "site" & !is.null(input$siteType)) {
      BAGUEsite<-data$table$BAGUE[data$table$LIEUDIT %in% input$siteType]
      data$table<-data$table[which(data$table$BAGUE %in% BAGUEsite),]
    }
    
    
    data$table$ANNEE<-substr(data$table$DATE, 7,10)
    
    selectizeInput("anType", "",
                   unique(data$table$ANNEE),
                   selected = NULL, multiple = TRUE,
                   options = list(placeholder = "Choisir les annees"))
    
    
  })
  
  
  # Create select box input for choosing species types
  output$spTypeUi <- renderUI({
    data$table$lat<-as.numeric(data$table$LAT)
    data$table$lon<-as.numeric(data$table$LON)
    data$table$metal.ring.info[data$table$ACTION=="B"]<-1
    data$table$metal.ring.info[data$table$ACTION=="C"]<-4
    data$table$metal.ring.info[data$table$ACTION=="R"]<-4
    data$table$ring<-data$table$BAGUE
    data$table$scheme<-data$table$CENTRE
    bird_recapt<-as.data.frame(table(data$table$BAGUE))
    bird_recapt2<-bird_recapt[which(bird_recapt$Freq>1),]
    data$table<-data$table[which(data$table$BAGUE %in% bird_recapt2$Var1),]
    
    if(input$subsetType2 == "site" & !is.null(input$siteType)) {
      BAGUEsite<-data$table$BAGUE[data$table$LIEUDIT %in% input$siteType]
      data$table<-data$table[which(data$table$BAGUE %in% BAGUEsite),]
    }
    
    if(input$subsetType3 == "an" & !is.null(input$anType)) {
      BAGUEan<-data$table$BAGUE[data$table$ANNEE %in% input$anType]
      data$table<-data$table[which(data$table$BAGUE %in% BAGUEan),]
    }
    
    selectizeInput("spType", "",
                   unique(data$table$ESPECE),
                   selected = NULL, multiple = TRUE,
                   options = list(placeholder = "Choisir les especes"))
    
    
  })	
    

  observeEvent(input$actBtnreinitialisation, {
    
      data$table = read.csv(input$dataFile$datapath,
                                   header = TRUE,
                                   sep = ";",
                                   dec=",")
      data$table$lat<-as.numeric(data$table$LAT)
      data$table$lon<-as.numeric(data$table$LON)
      data$table$metal.ring.info[data$table$ACTION=="B"]<-1
      data$table$metal.ring.info[data$table$ACTION=="C"]<-4
      data$table$metal.ring.info[data$table$ACTION=="R"]<-4
      data$table$ring<-data$table$BAGUE
      data$table$scheme<-data$table$CENTRE
      bird_recapt<-as.data.frame(table(data$table$BAGUE))
      bird_recapt2<-bird_recapt[which(bird_recapt$Freq>1),]
      data$table<-data$table[which(data$table$BAGUE %in% bird_recapt2$Var1),]
      
      
      selectizeInput("spType", "",
                     unique(data$table$ESPECE),
                     selected = NULL, multiple = TRUE,
                     options = list(placeholder = "Choisir les especes"))

      sendSweetAlert(
        session = session,
        title = "Done !",
        text = "Selection reinitialisee !",
        type = "success"
      )
      updateTabItems(session, "tabs", selected = "Selection")
      
    })
     
    
    
  observeEvent(input$updateBtn, {
    
    sendSweetAlert(
      session = session,
      title = "Done !",
      text = "Donnees selectionnees !",
      type = "success"
    )
  
  output$plotAvecR <- renderPlot({
    data$table$lat<-as.numeric(data$table$LAT)
    data$table$lon<-as.numeric(data$table$LON)
    data$table$metal.ring.info[data$table$ACTION=="B"]<-1
    data$table$metal.ring.info[data$table$ACTION=="C"]<-4
    data$table$metal.ring.info[data$table$ACTION=="R"]<-4
    data$table$ring<-data$table$BAGUE
    data$table$scheme<-data$table$CENTRE
    bird_recapt<-as.data.frame(table(data$table$BAGUE))
    bird_recapt2<-bird_recapt[which(bird_recapt$Freq>1),]
    data$table<-data$table[which(data$table$BAGUE %in% bird_recapt2$Var1),]

    if(input$subsetType2 == "site" & !is.null(input$siteType)) {
      BAGUEsite<-data$table$BAGUE[data$table$LIEUDIT %in% input$siteType]
      data$table<-data$table[which(data$table$BAGUE %in% BAGUEsite),]
    }
    
    if(input$subsetType3 == "an" & !is.null(input$anType)) {
      BAGUEan<-data$table$BAGUE[data$table$ANNEE %in% input$anType]
      data$table<-data$table[which(data$table$BAGUE %in% BAGUEan),]
    }
    
    if (input$subsetType == "specific" & !is.null(input$spType)) {
      data$table<-data$table[which(data$table$ESPECE %in% input$spType),]
    }

    
    #tracage de la carte
   
    draw.recmap(data$table, points=1, lines=1, pcol="black", lcol="red",
                mercator=TRUE,
                projection= "mercator", border= "gray", 
                bbox=c(min(data$table$lon)-5, max(data$table$lon)+5,
                       min(data$table$lat)-5,max(data$table$lat)+5))

  })
  
  })
  
  
  #coder dans le file name annee especes et 3 premieres lettres du site

  output$downloadPlot <- downloadHandler(
    filename = function() { paste("carte", '.png', sep='') },
    content = function(file) {
      data$table$lat<-as.numeric(data$table$LAT)
      data$table$lon<-as.numeric(data$table$LON)
      data$table$metal.ring.info[data$table$ACTION=="B"]<-1
      data$table$metal.ring.info[data$table$ACTION=="C"]<-4
      data$table$metal.ring.info[data$table$ACTION=="R"]<-4
      data$table$ring<-data$table$BAGUE
      data$table$scheme<-data$table$CENTRE
      bird_recapt<-as.data.frame(table(data$table$BAGUE))
      bird_recapt2<-bird_recapt[which(bird_recapt$Freq>1),]
      data$table<-data$table[which(data$table$BAGUE %in% bird_recapt2$Var1),]
      
      if(input$subsetType2 == "site" & !is.null(input$siteType)) {
        BAGUEsite<-data$table$BAGUE[data$table$LIEUDIT %in% input$siteType]
        data$table<-data$table[which(data$table$BAGUE %in% BAGUEsite),]
      }
      
      if(input$subsetType3 == "an" & !is.null(input$anType)) {
        BAGUEan<-data$table$BAGUE[data$table$ANNEE %in% input$anType]
        data$table<-data$table[which(data$table$BAGUE %in% BAGUEan),]
      }
      
      if (input$subsetType == "specific" & !is.null(input$spType)) {
        data$table<-data$table[which(data$table$ESPECE %in% input$spType),]
      }
      png(file,
          width = (max(data$table$lat)-min(data$table$lat))*100 ,
          height = (max(data$table$lon)-min(data$table$lon))*100 ,
          units = "px", pointsize = 20,
               bg = "white", res = NA)
    
      print(draw.recmap(data$table, points=1, lines=1, pcol="black", lcol="red",
                        mercator=TRUE,
                        projection= "mercator", border= "gray",
                        bbox=c(min(data$table$lon)-5, max(data$table$lon)+5,
                               min(data$table$lat)-5,max(data$table$lat)+5)))
      dev.off()
    })

  #TELECHARGEMENT SANS LES FRONTIERES
  output$downloadPlot2 <- downloadHandler(
    filename = function() { paste("cartesansfrontieres", '.png', sep='') },
    content = function(file) {
      data$table$lat<-as.numeric(data$table$LAT)
      data$table$lon<-as.numeric(data$table$LON)
      data$table$metal.ring.info[data$table$ACTION=="B"]<-1
      data$table$metal.ring.info[data$table$ACTION=="C"]<-4
      data$table$metal.ring.info[data$table$ACTION=="R"]<-4
      data$table$ring<-data$table$BAGUE
      data$table$scheme<-data$table$CENTRE
      bird_recapt<-as.data.frame(table(data$table$BAGUE))
      bird_recapt2<-bird_recapt[which(bird_recapt$Freq>1),]
      data$table<-data$table[which(data$table$BAGUE %in% bird_recapt2$Var1),]
      
      if(input$subsetType2 == "site" & !is.null(input$siteType)) {
        BAGUEsite<-data$table$BAGUE[data$table$LIEUDIT %in% input$siteType]
        data$table<-data$table[which(data$table$BAGUE %in% BAGUEsite),]
      }
      
      if(input$subsetType3 == "an" & !is.null(input$anType)) {
        BAGUEan<-data$table$BAGUE[data$table$ANNEE %in% input$anType]
        data$table<-data$table[which(data$table$BAGUE %in% BAGUEan),]
      }
      
      if (input$subsetType == "specific" & !is.null(input$spType)) {
        data$table<-data$table[which(data$table$ESPECE %in% input$spType),]
      }
      png(file,
          width = (max(data$table$lat)-min(data$table$lat))*100 ,
          height = (max(data$table$lon)-min(data$table$lon))*100 ,
          units = "px", pointsize = 20,
          bg = "white", res = NA)
      
      print(draw.recmap(data$table, points=1, lines=1, pcol="black", lcol="red",
                        mercator=TRUE,
                        projection= "mercator", border= NA,
                        bbox=c(min(data$table$lon)-5, max(data$table$lon)+5,
                               min(data$table$lat)-5,max(data$table$lat)+5)))
      dev.off()
    })
  
  
  url2 <- a("Korner-Nievergelt et Robinson, 2014 ", href="https://doi.org/10.1080/03078698.2014.933053")
  output$ref <- renderUI({
    tagList("Reference", url2)
  })
  
  
}



